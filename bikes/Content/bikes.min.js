"use strict";angular.module("bikesApp",["ui.router","ui.grid","ui.bootstrap","bikeServices","chart.js"]).config(["$stateProvider","$urlRouterProvider",function(e,r){r.otherwise("/user-home"),e.state("home",{url:"/home",templateUrl:"/content/app/html/home.html",controller:"homeController"}).state("userHome",{url:"/user-home",templateUrl:"/content/app/html/user-home.html",controller:"userHomeController"}).state("analysis",{url:"/analysis",templateUrl:"/content/app/html/analysis.html",controller:"analysisController"}).state("reports",{url:"/reports",templateUrl:"/content/app/html/report.html",controller:"reportController"}).state("fiddle",{url:"/fiddle",templateUrl:"/content/app/html/fiddle.html",controller:"fiddleController"}).state("paymentList",{url:"/payment",templateUrl:"/content/app/html/payment-list.html",controller:"paymentListController"}).state("rideList",{url:"/ride",templateUrl:"/content/app/html/ride-list.html",controller:"rideListController"}).state("rideAdd",{url:"/ride/add/:riderId",templateUrl:"/content/app/html/ride-add.html",controller:"rideAddController"}).state("rideEdit",{url:"/ride/:id/edit",templateUrl:"/content/app/html/ride-edit.html",controller:"rideEditController"}).state("routeList",{url:"/route",templateUrl:"/content/app/html/route-list.html",controller:"routeListController"}).state("routeAdd",{url:"/route/:id/add",templateUrl:"/content/app/html/route-edit.html",controller:"routeEditController"}).state("routeEdit",{url:"/route/:id/edit",templateUrl:"/content/app/html/route-edit.html",controller:"routeEditController"}).state("riderList",{url:"/rider",templateUrl:"/content/app/html/rider-list.html",controller:"riderListController"}).state("riderAdd",{url:"/rider/:id/add",templateUrl:"/content/app/html/rider-edit.html",controller:"riderEditController"}).state("riderEdit",{url:"/rider/:id/edit",templateUrl:"/content/app/html/rider-edit.html",controller:"riderEditController"}).state("riderPwd",{url:"/rider/:id/pwd",templateUrl:"/content/app/html/rider-pwd.html",controller:"riderPwdController"}).state("bikeList",{url:"/bike",templateUrl:"/content/app/html/bike-list.html",controller:"bikeListController"}).state("bikeAdd",{url:"/bike/:id/add",templateUrl:"/content/app/html/bike-edit.html",controller:"bikeEditController"}).state("bikeEdit",{url:"/bike/:id/edit",templateUrl:"/content/app/html/bike-edit.html",controller:"bikeEditController"})}]),angular.module("bikeServices",["ngResource"]).factory("Bike",["$resource",function(e){return e("/api/bike/:id",{id:"@id"},{trash:{method:"POST",url:"/api/bike/:id/delete"}})}]).factory("Rider",["$resource",function(e){return e("/api/rider/:id",{id:"@id"},{trash:{method:"POST",url:"/api/rider/:id/delete"}})}]).factory("RiderPwd",["$resource",function(e){return e("/api/rider/:id/pwd",{id:"@id"},{setPwd:{method:"POST"}})}]).factory("Route",["$resource",function(e){return e("/api/route/:id",{id:"@id"},{trash:{method:"POST",url:"/api/route/:id/delete"}})}]).factory("Ride",["$resource",function(e){return e("/api/ride/:id",{id:"@id"},{trash:{method:"POST",url:"/api/ride/:id/delete"}})}]).factory("Payment",["$resource",function(e){return e("/api/payment")}]).factory("BankBranch",["$resource",function(e){return e("/api/bank/branch")}]).factory("BankCustomer",["$resource",function(e){return e("/api/bank/branch/:branchId/customer",{branchId:"branchId"})}]).factory("BankAccount",["$resource",function(e){return e("/api/bank/customer/:customerId/account",{customerId:"customerId"})}]).factory("Model",["$resource",function(e){return e("/api/model/:year",{year:"@year"})}]).factory("Report",["$resource",function(e){return e("/api/report/:id",{id:"@id"})}]).factory("Admin",["$resource",function(e){return e("/api/admin/",null,{refresh:{method:"POST",url:"/api/admin/routes/update"}})}]),angular.module("bikeServices").factory("model",["Model","currentUser","currentYear",function(e,a,r){var t=function(d){return e.get({year:d},function(n){var e;n.currentRider=(new jinqJs).from(n.riders).where(function(e){return e.id==a.riderId}).select()[0],n.rides.forEach(function(e){e.ride_date=new Date(e.ride_date)}),n.chartColors=(new jinqJs).from(n.riders).select(function(e){return{fillColor:e.color_code,strokeColor:e.color_code,highlightFill:e.color_code,highlightStroke:e.color_code}});var r=[],t=[],o=moment().weeksInYear();for(e=1;e<=o;e++)r.push({id:e,caption:e.toString()});for(e=0;e<12;e++)t.push({id:e+1,caption:moment([d,e,1]).format("MMM")});var i=function(e,o){return{labels:(new jinqJs).from(e).select(function(e){return e.caption}),series:[n.currentRider.name],colors:[{fillColor:n.currentRider.color_code,strokeColor:n.currentRider.color_code,highlightFill:n.currentRider.color_code,highlightStroke:n.currentRider.color_code}],data:(new jinqJs).from(n.riders).where(function(e){return e.id==n.currentRider.id}).select(function(t){return(new jinqJs).from(e).select(function(r){return(new jinqJs).from(n.rides).where(function(e){return e.rider_id==t.id&&o(e,r)}).sum("distance").select(function(e){return Math.floor(e)})[0]})})}};n.yearSummaryChartData={labels:(new jinqJs).from(n.months).select(function(e){return e.caption}),series:(new jinqJs).from(n.riders).select(function(e){return e.name}),colors:n.chartColors,data:(new jinqJs).from(n.riders).select(function(t){return(new jinqJs).from(n.months).select(function(r){return(new jinqJs).from(n.rides).where(function(e){return e.rider_id==t.id&&e.month==r.month}).sum("distance").select(function(e){return Math.floor(e)})[0]})})},n.currentRiderYearSummaryChartDataW=i(r,function(e,r){return moment(e.ride_date).week()==r.id}),n.currentRiderYearSummaryChartDataM=i(t,function(e,r){return e.month==r.id}),n.monthSummaryChartData={labels:[moment().format("MMMM")],series:(new jinqJs).from(n.riders).select(function(e){return e.name}),colors:n.chartColors,data:(new jinqJs).from(n.riders).select(function(r){return(new jinqJs).from(n.rides).where(function(e){return e.rider_id==r.id&&e.month==moment().month()+1}).sum("distance").select()})},n.currentRiderRides=(new jinqJs).from(n.rides).where(function(e){return e.rider_id==a.riderId}).select(),n.currentRiderSummary=(new jinqJs).from(n.riderSummary).where(function(e){return e.riderId==a.riderId}).select()[0]})};return{data:t(r.year),refresh:function(){this.data=t(r.year)}}}]),angular.module("bikesApp").controller("bikeListController",["$scope","$state","model",function(e,r,t){e.data=t.data,e.add=function(){r.go("bikeAdd",{id:0})}}]).controller("bikeEditController",["$scope","$state","$stateParams","model","Bike",function(e,r,t,o,n){0==t.id?e.bike=new n:e.bike=n.get({id:t.id}),e.saveForm=function(){e.bike.$save(function(){o.refresh(),r.go("bikeList")})},e.deleteBike=function(){e.bike.$trash(function(){o.refresh(),r.go("bikeList")})},e.cancel=function(){r.go("bikeList")}}]),angular.module("bikesApp").controller("riderListController",["$scope","$state","model",function(e,r,t){e.data=t.data,e.add=function(){r.go("riderAdd",{id:0})}}]).controller("riderPwdController",["$scope","$state","$stateParams","RiderPwd",function(e,r,t,o){e.rider=new o,e.saveForm=function(){e.rider.$setPwd({id:t.id},function(){r.go("riderList")},function(){alert("Could not save rider")})},e.cancel=function(){r.go("riderList")}}]).controller("riderEditController",["$scope","$state","$stateParams","model","Rider","BankBranch","BankCustomer","BankAccount",function(e,r,t,o,n,i,d,a){e.branches=i.query(),e.customers=[],e.accounts=[],e.data=o.data,0==t.id?e.rider=new n:e.rider=n.get({id:t.id}),e.$watch("rider.bank_branch_id",function(){e.customers=d.query({branchId:e.rider.bank_branch_id})}),e.$watch("rider.bank_customer_id",function(){e.accounts=a.query({customerId:e.rider.bank_customer_id})}),e.saveForm=function(){e.rider.$save(function(){o.refresh(),r.go("riderList")},function(){alert("Could not save rider")})},e.deleteRider=function(){e.rider.$trash(function(){o.refresh(),r.go("riderList")})},e.setPwd=function(){r.go("riderPwd",{id:t.id})},e.cancel=function(){r.go("riderList")}}]),angular.module("bikesApp").controller("routeListController",["$scope","$state","model","Admin",function(e,r,t,o){e.data=t.data,e.add=function(){r.go("routeAdd",{id:0})},e.refresh=function(){o.refresh(function(){t.refresh(),r.go("routeList")})}}]).controller("routeEditController",["$scope","$state","$stateParams","model","Route",function(e,r,t,o,n){0==t.id?e.route=new n:e.route=n.get({id:t.id}),e.saveForm=function(){e.route.$save(function(){o.refresh(),r.go("routeList")})},e.deleteRoute=function(){e.route.$trash(function(){o.refresh(),r.go("routeList")})},e.cancel=function(){r.go("routeList")}}]),angular.module("bikesApp").controller("rideListController",["$scope","$state","model",function(e,r,t){e.model=t,e.add=function(){r.go("rideAdd")}}]).controller("rideAddController",["$scope","$state","$stateParams","model","Ride","Rider","Route","Bike",function(t,e,r,o,n,i,d,a){t.dateOptions={showWeeks:!1},t.openDatePicker=function(){t.datePickerOpen=!0},t.routeCaption=function(e){return 1===e.id?e.name:e.name+" ("+e.distance+" miles)"};var l=function(){r.riderId?e.go("userHome"):e.go("rideList")};t.routes=d.query(),t.bikes=a.query(),t.riders=i.query(),t.ride=new n,t.ride.distance=0,t.ride.ride_date=new Date,o.data.currentRider&&(t.ride.payable=o.data.currentRider.default_payable),t.ride.bonus=0,t.ride.rider_id=r.riderId?parseInt(r.riderId,10):0,t.ride.route_id=1,t.ride.bike_id=1,t.riderChanged=function(){t.rider=function(e){var r;for(r=0;r<t.riders.length;r++)if(t.riders[r].id===e)return t.riders[r]}(t.ride.rider_id),t.ride.payable=t.rider.default_payable},t.calculateReward=function(){var e,r;return t.rider?(t.ride.payable?(1<t.ride.route_id?(e=function(e){var r;for(r=0;r<t.routes.length;r++)if(t.routes[r].id===e)return t.routes[r]}(t.ride.route_id).distance,t.ride.returnRide&&(e*=2)):e=t.ride.distance,r=t.ride.bonus+e*t.rider.rate/100):r=0,r.toFixed(2)):0},t.saveForm=function(){t.ride.$save(function(){o.refresh(),l()},function(){alert("Failed to save new ride."),l()})},t.cancel=function(){l()}}]).controller("rideEditController",["$scope","$state","$stateParams","model","Ride",function(r,e,t,o,n){r.ride=n.get({id:t.id});var i=function(){t.riderId?e.go("userHome"):e.go("rideList")};r.saveForm=function(){r.ride.$save(function(){o.refresh(),i()})},r.deleteRide=function(){n.trash({id:t.id},function(e){"OK"===e.status?(o.refresh(),i()):"ALREADY_PAID"===e.status?r.message="Rides that have been paid cannot be deleted.":r.message="There was a problem deleting this ride."},function(e){alert("failed to delete ride - "+e.status)})},r.cancel=function(){i()}}]),angular.module("bikesApp").controller("homeController",["$scope","$state","model","currentYear",function(e,r,t,o){e.model=t,e.currentYear=o}]),angular.module("bikesApp").controller("paymentListController",["$scope","$state","model","Payment",function(e,r,t,o){e.data=t.data,e.pay=function(){o.save(),t.refresh()}}]),angular.module("bikesApp").controller("analysisController",["$scope","$state","uiGridConstants","model",function(e,r,t,o){e.model=o,e.gridOptions={enableSorting:!0,enableFiltering:!0,showGridFooter:!0,showColumnFooter:!0,columnDefs:[{name:"rider",field:"rider"},{name:"bike",field:"bike"},{name:"route",field:"route"},{name:"distance",field:"distance",type:"number",aggregationType:t.aggregationTypes.sum,footerCellTemplate:"<div>{{col.getAggregationValue() | number : 0}}</div>",enableFiltering:!1},{name:"reward",field:"reward",type:"number",aggregationType:t.aggregationTypes.sum,footerCellTemplate:"<div>{{col.getAggregationValue() | number : 2}}</div>",enableFiltering:!1},{name:"date",field:"ride_date",type:"date",cellFilter:"date",enableFiltering:!1}],data:"model.data.rides"}}]),angular.module("bikesApp").controller("userHomeController",["$scope","$state","currentUser","model",function(e,r,t,o){e.currentUser=t,e.showMonthly=!0,o.data.$promise.then(function(){e.model=o,e.chartData=function(){return e.showMonthly?o.data.currentRiderYearSummaryChartDataM:o.data.currentRiderYearSummaryChartDataW},e.toggleChart=function(){e.showMonthly=!e.showMonthly}}),e.addRide=function(){r.go("rideAdd",{riderId:t.riderId})}}]),angular.module("bikesApp").controller("navController",["$scope","$state","model","currentYear",function(e,r,t,o){e.year=o.year,e.years=["2016","2017","2018"],e.onChange=function(){o.setYear(e.year),t.refresh()}}]),angular.module("bikesApp").controller("reportController",["$scope","$state","Report",function(r,e,t){r.routeReport=[],t.get(function(e){r.reports=e.reports},function(){alert("Failed to get report data.")})}]),angular.module("bikesApp").controller("fiddleController",["$scope","$state","$stateParams",function(e,r,t){}]);