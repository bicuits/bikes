"use strict";angular.module("bikesApp",["ui.router","ui.grid","ui.bootstrap","bikeServices","chart.js"]).config(["$stateProvider","$urlRouterProvider",function(a,b){b.otherwise("/user-home"),a.state("home",{url:"/home",templateUrl:"/content/app/html/home.html",controller:"homeController"}).state("userHome",{url:"/user-home",templateUrl:"/content/app/html/user-home.html",controller:"userHomeController"}).state("analysis",{url:"/analysis",templateUrl:"/content/app/html/analysis.html",controller:"analysisController"}).state("reports",{url:"/reports",templateUrl:"/content/app/html/report.html",controller:"reportController"}).state("fiddle",{url:"/fiddle",templateUrl:"/content/app/html/fiddle.html",controller:"fiddleController"}).state("paymentList",{url:"/payment",templateUrl:"/content/app/html/payment-list.html",controller:"paymentListController"}).state("rideList",{url:"/ride",templateUrl:"/content/app/html/ride-list.html",controller:"rideListController"}).state("rideAdd",{url:"/ride/add/:riderId",templateUrl:"/content/app/html/ride-add.html",controller:"rideAddController"}).state("rideEdit",{url:"/ride/:id/edit",templateUrl:"/content/app/html/ride-edit.html",controller:"rideEditController"}).state("routeList",{url:"/route",templateUrl:"/content/app/html/route-list.html",controller:"routeListController"}).state("routeAdd",{url:"/route/:id/add",templateUrl:"/content/app/html/route-edit.html",controller:"routeEditController"}).state("routeEdit",{url:"/route/:id/edit",templateUrl:"/content/app/html/route-edit.html",controller:"routeEditController"}).state("riderList",{url:"/rider",templateUrl:"/content/app/html/rider-list.html",controller:"riderListController"}).state("riderAdd",{url:"/rider/:id/add",templateUrl:"/content/app/html/rider-edit.html",controller:"riderEditController"}).state("riderEdit",{url:"/rider/:id/edit",templateUrl:"/content/app/html/rider-edit.html",controller:"riderEditController"}).state("riderPwd",{url:"/rider/:id/pwd",templateUrl:"/content/app/html/rider-pwd.html",controller:"riderPwdController"}).state("bikeList",{url:"/bike",templateUrl:"/content/app/html/bike-list.html",controller:"bikeListController"}).state("bikeAdd",{url:"/bike/:id/add",templateUrl:"/content/app/html/bike-edit.html",controller:"bikeEditController"}).state("bikeEdit",{url:"/bike/:id/edit",templateUrl:"/content/app/html/bike-edit.html",controller:"bikeEditController"})}]),angular.module("bikeServices",["ngResource"]).factory("Bike",["$resource",function(a){return a("/api/bike/:id",{id:"@id"},{trash:{method:"POST",url:"/api/bike/:id/delete"}})}]).factory("Rider",["$resource",function(a){return a("/api/rider/:id",{id:"@id"},{trash:{method:"POST",url:"/api/rider/:id/delete"}})}]).factory("RiderPwd",["$resource",function(a){return a("/api/rider/:id/pwd",{id:"@id"},{setPwd:{method:"POST"}})}]).factory("Route",["$resource",function(a){return a("/api/route/:id",{id:"@id"},{trash:{method:"POST",url:"/api/route/:id/delete"}})}]).factory("Ride",["$resource",function(a){return a("/api/ride/:id",{id:"@id"},{trash:{method:"POST",url:"/api/ride/:id/delete"}})}]).factory("Payment",["$resource",function(a){return a("/api/payment")}]).factory("BankBranch",["$resource",function(a){return a("/api/bank/branch")}]).factory("BankCustomer",["$resource",function(a){return a("/api/bank/branch/:branchId/customer",{branchId:"branchId"})}]).factory("BankAccount",["$resource",function(a){return a("/api/bank/customer/:customerId/account",{customerId:"customerId"})}]).factory("Model",["$resource",function(a){return a("/api/model/:year",{year:"@year"})}]).factory("Report",["$resource",function(a){return a("/api/report/:id",{id:"@id"})}]).factory("Admin",["$resource",function(a){return a("/api/admin/",null,{refresh:{method:"POST",url:"/api/admin/routes/update"}})}]),angular.module("bikeServices").factory("model",["Model","currentUser","currentYear",function(a,b,c){var d=function(c){return a.get({year:c},function(a){a.currentRider=(new jinqJs).from(a.riders).where(function(a){return a.id==b.riderId}).select()[0],a.rides.forEach(function(a){a.ride_date=new Date(a.ride_date)}),a.chartColors=(new jinqJs).from(a.riders).select(function(a){return{fillColor:a.color_code,strokeColor:a.color_code,highlightFill:a.color_code,highlightStroke:a.color_code}});var d,e=[],f=[],g=moment().weeksInYear();for(d=1;d<=g;d++)e.push({id:d,caption:d.toString()});for(d=0;d<12;d++)f.push({id:d+1,caption:moment([c,d,1]).format("MMM")});var h=function(b,c){return{labels:(new jinqJs).from(b).select(function(a){return a.caption}),series:[a.currentRider.name],colors:[{fillColor:a.currentRider.color_code,strokeColor:a.currentRider.color_code,highlightFill:a.currentRider.color_code,highlightStroke:a.currentRider.color_code}],data:(new jinqJs).from(a.riders).where(function(b){return b.id==a.currentRider.id}).select(function(d){return(new jinqJs).from(b).select(function(b){return(new jinqJs).from(a.rides).where(function(a){return a.rider_id==d.id&&c(a,b)}).sum("distance").select(function(a){return Math.floor(a)})[0]})})}};a.yearSummaryChartData={labels:(new jinqJs).from(a.months).select(function(a){return a.caption}),series:(new jinqJs).from(a.riders).select(function(a){return a.name}),colors:a.chartColors,data:(new jinqJs).from(a.riders).select(function(b){return(new jinqJs).from(a.months).select(function(c){return(new jinqJs).from(a.rides).where(function(a){return a.rider_id==b.id&&a.month==c.month}).sum("distance").select(function(a){return Math.floor(a)})[0]})})},a.currentRiderYearSummaryChartDataW=h(e,function(a,b){return moment(a.ride_date).week()==b.id}),a.currentRiderYearSummaryChartDataM=h(f,function(a,b){return a.month==b.id}),a.monthSummaryChartData={labels:[moment().format("MMMM")],series:(new jinqJs).from(a.riders).select(function(a){return a.name}),colors:a.chartColors,data:(new jinqJs).from(a.riders).select(function(b){return(new jinqJs).from(a.rides).where(function(a){return a.rider_id==b.id&&a.month==moment().month()+1}).sum("distance").select()})},a.currentRiderRides=(new jinqJs).from(a.rides).where(function(a){return a.rider_id==b.riderId}).select(),a.currentRiderSummary=(new jinqJs).from(a.riderSummary).where(function(a){return a.riderId==b.riderId}).select()[0]})};return{data:d(c.year),refresh:function(){this.data=d(c.year)}}}]),angular.module("bikesApp").controller("bikeListController",["$scope","$state","model",function(a,b,c){a.data=c.data,a.add=function(){b.go("bikeAdd",{id:0})}}]).controller("bikeEditController",["$scope","$state","$stateParams","model","Bike",function(a,b,c,d,e){0==c.id?a.bike=new e:a.bike=e.get({id:c.id}),a.saveForm=function(){a.bike.$save(function(){d.refresh(),b.go("bikeList")})},a.deleteBike=function(){a.bike.$trash(function(){d.refresh(),b.go("bikeList")})},a.cancel=function(){b.go("bikeList")}}]),angular.module("bikesApp").controller("riderListController",["$scope","$state","model",function(a,b,c){a.data=c.data,a.add=function(){b.go("riderAdd",{id:0})}}]).controller("riderPwdController",["$scope","$state","$stateParams","RiderPwd",function(a,b,c,d){a.rider=new d,a.saveForm=function(){a.rider.$setPwd({id:c.id},function(){b.go("riderList")},function(){alert("Could not save rider")})},a.cancel=function(){b.go("riderList")}}]).controller("riderEditController",["$scope","$state","$stateParams","model","Rider","BankBranch","BankCustomer","BankAccount",function(a,b,c,d,e,f,g,h){a.branches=f.query(),a.customers=[],a.accounts=[],a.data=d.data,0==c.id?a.rider=new e:a.rider=e.get({id:c.id}),a.$watch("rider.bank_branch_id",function(){a.customers=g.query({branchId:a.rider.bank_branch_id})}),a.$watch("rider.bank_customer_id",function(){a.accounts=h.query({customerId:a.rider.bank_customer_id})}),a.saveForm=function(){a.rider.$save(function(){d.refresh(),b.go("riderList")},function(){alert("Could not save rider")})},a.deleteRider=function(){a.rider.$trash(function(){d.refresh(),b.go("riderList")})},a.setPwd=function(){b.go("riderPwd",{id:c.id})},a.cancel=function(){b.go("riderList")}}]),angular.module("bikesApp").controller("routeListController",["$scope","$state","model","Admin",function(a,b,c,d){a.data=c.data,a.add=function(){b.go("routeAdd",{id:0})},a.refresh=function(){d.refresh(function(){c.refresh(),b.go("routeList")})}}]).controller("routeEditController",["$scope","$state","$stateParams","model","Route",function(a,b,c,d,e){0==c.id?a.route=new e:a.route=e.get({id:c.id}),a.saveForm=function(){a.route.$save(function(){d.refresh(),b.go("routeList")})},a.deleteRoute=function(){a.route.$trash(function(){d.refresh(),b.go("routeList")})},a.cancel=function(){b.go("routeList")}}]),angular.module("bikesApp").controller("rideListController",["$scope","$state","model",function(a,b,c){a.model=c,a.add=function(){b.go("rideAdd")}}]).controller("rideAddController",["$scope","$state","$stateParams","model","Ride","Rider","Route","Bike",function(a,b,c,d,e,f,g,h){a.dateOptions={showWeeks:!1},a.openDatePicker=function(){a.datePickerOpen=!0},a.routeCaption=function(a){return 1===a.id?a.name:a.name+" ("+a.distance+" miles)"};var i=function(){c.riderId?b.go("userHome"):b.go("rideList")},j=function(b){var c;for(c=0;c<a.riders.length;c++)if(a.riders[c].id===b)return a.riders[c]},k=function(b){var c;for(c=0;c<a.routes.length;c++)if(a.routes[c].id===b)return a.routes[c]};a.routes=g.query(),a.bikes=h.query(),a.riders=f.query(),a.ride=new e,a.ride.distance=0,a.ride.ride_date=new Date,d.data.currentRider&&(a.ride.payable=d.data.currentRider.default_payable),a.ride.bonus=0,a.ride.rider_id=c.riderId?parseInt(c.riderId,10):0,a.ride.route_id=1,a.ride.bike_id=1,a.riderChanged=function(){a.rider=j(a.ride.rider_id),a.ride.payable=a.rider.default_payable},a.calculateReward=function(){var b,c;return a.rider?(a.ride.payable?(a.ride.route_id>1?(b=k(a.ride.route_id).distance,a.ride.returnRide&&(b*=2)):b=a.ride.distance,c=a.ride.bonus+b*a.rider.rate/100):c=0,c.toFixed(2)):0},a.saveForm=function(){a.ride.$save(function(){d.refresh(),i()},function(){alert("Failed to save new ride."),i()})},a.cancel=function(){i()}}]).controller("rideEditController",["$scope","$state","$stateParams","model","Ride",function(a,b,c,d,e){a.ride=e.get({id:c.id});var f=function(){c.riderId?b.go("userHome"):b.go("rideList")};a.saveForm=function(){a.ride.$save(function(){d.refresh(),f()})},a.deleteRide=function(){e.trash({id:c.id},function(b){"OK"===b.status?(d.refresh(),f()):"ALREADY_PAID"===b.status?a.message="Rides that have been paid cannot be deleted.":a.message="There was a problem deleting this ride."},function(a){alert("failed to delete ride - "+a.status)})},a.cancel=function(){f()}}]),angular.module("bikesApp").controller("homeController",["$scope","$state","model","currentYear",function(a,b,c,d){a.model=c,a.currentYear=d}]),angular.module("bikesApp").controller("paymentListController",["$scope","$state","model","Payment",function(a,b,c,d){a.data=c.data,a.pay=function(){d.save(),c.refresh()}}]),angular.module("bikesApp").controller("analysisController",["$scope","$state","uiGridConstants","model",function(a,b,c,d){a.model=d,a.gridOptions={enableSorting:!0,enableFiltering:!0,showGridFooter:!0,showColumnFooter:!0,columnDefs:[{name:"rider",field:"rider"},{name:"bike",field:"bike"},{name:"route",field:"route"},{name:"distance",field:"distance",type:"number",aggregationType:c.aggregationTypes.sum,footerCellTemplate:"<div>{{col.getAggregationValue() | number : 0}}</div>",enableFiltering:!1},{name:"reward",field:"reward",type:"number",aggregationType:c.aggregationTypes.sum,footerCellTemplate:"<div>{{col.getAggregationValue() | number : 2}}</div>",enableFiltering:!1},{name:"date",field:"ride_date",type:"date",cellFilter:"date",enableFiltering:!1}],data:"model.data.rides"}}]),angular.module("bikesApp").controller("userHomeController",["$scope","$state","currentUser","model",function(a,b,c,d){a.currentUser=c,a.showMonthly=!0,d.data.$promise.then(function(){a.model=d,a.chartData=function(){return a.showMonthly?d.data.currentRiderYearSummaryChartDataM:d.data.currentRiderYearSummaryChartDataW},a.toggleChart=function(){a.showMonthly=!a.showMonthly}}),a.addRide=function(){b.go("rideAdd",{riderId:c.riderId})}}]),angular.module("bikesApp").controller("navController",["$scope","$state","model","currentYear",function(a,b,c,d){a.year=d.year,a.years=["2016","2017"],a.onChange=function(){d.setYear(a.year),c.refresh()}}]),angular.module("bikesApp").controller("reportController",["$scope","$state","Report",function(a,b,c){a.routeReport=[],function(){c.get(function(b){a.reports=b.reports},function(){alert("Failed to get report data.")})}()}]),angular.module("bikesApp").controller("fiddleController",["$scope","$state","$stateParams",function(a,b,c){}]);